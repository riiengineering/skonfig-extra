#!/bin/sh -e
#
# 2022 Dennis Camera (dennis.camera at riiengineering.ch)
#
# This file is part of skonfig-extra.
#
# skonfig-extra is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# skonfig-extra is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with skonfig-extra. If not, see <http://www.gnu.org/licenses/>.
#
# Prints the attributes of an opam switch if one with a matching name exists.
#

quote() { printf '%s\n' "$*" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/'/"; }

opam_vars='OPAMROOTISOK=1 OPAMCOLOR=never OPAMUTF8=never OPAMSTATUSLINE=never OPAMCLI=2.0'

OPAMROOT=$("${__type_explorer:?}/root-dir")
opam_vars="${opam_vars} OPAMROOT=$(quote "${OPAMROOT}")"

# shellcheck disable=SC2015
command -v opam >/dev/null 2>&1 \
&& {
	# NOTE: check for presence of opam root always before executing opam(1) as
	#       opam will create a lock file inside the $OPAMROOT even if it is not
	#       a valid root, thus preventing creation of said root later on.
	# cf. type/__opam_root/explorer/state
	test -e "${OPAMROOT}/config" || test -e "${OPAMROOT}/aliases"
} || {
	# no opam (root) -> no switch
	exit 0
}

read -r user <"${__object:?}/parameter/user"

if test -s "${__object:?}/parameter/name"
then
	read -r name <"${__object:?}/parameter/name"
else
	name=${__object_id:?}
fi


su - "${user}" -c "${opam_vars} exec opam switch list" \
| awk -v name="${name}" '

## parse the columns of the stupid but beautiful **.** opam table which cannot
## be fetched in machine-readable format.
## programmersâ€¦

function selectcol(name,    a, s) {
	if (!(name in coloffs)) return ""
	split(coloffs[name], a, "-")

	s = substr($0, a[1], a[2] ? a[2]-a[1] : length)
	sub(/ *$/, "", s)
	return s
}

FNR==1 {
	# collect column offsets
	for (i = 1; i <= NF; ++i) {
		coloffs[$i] = index($0, $i)
		if (i > 1)
			coloffs[$(i-1)] = coloffs[$(i-1)] "-" (coloffs[$i]-1)
	}

	next
}

{
	# only bump switch N if the switch column is non-empty. If it is, assume
	# line continuation (description?) and append to previous line
	if (selectcol("switch")) ++N

	for (k in coloffs) {
		if ((v = selectcol(k))) {
			switches[N, k] = (switches[N, k] ? switches[N, k] RS : "") v
		}
	}
}

END {
	for (i = 1; i <= N; ++i) {
		if (switches[i, "switch"] == name) {
			# print switch attributes
			for (k in coloffs) {
				v = switches[i, k]
				if (k == "#") {
					k = "active"
					v = v ? "true" : "false"
				}
				gsub(/\n/, "\036", v)
				printf "%s=%s\n", k, v
			}
		}
	}
}'
