#!/bin/sh -e
#
# 2020 Matthias Stecher (matthiasstecher at gmx.de)
#
# This file is part of skonfig-extra.
#
# skonfig-extra is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# skonfig-extra is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with skonfig-extra. If not, see <http://www.gnu.org/licenses/>.
#

# Check states
state=""
unit_state=""
param_state=$(cat "${__object:?}/parameter/state")

case ${param_state}
in
    (enabled|disabled)
        state="present"
        unit_state=${param_state}
        ;;

    (absent)
        state="absent"
        unit_state="disabled"
        ;;

    (*)
        # does not exist
        printf "The state '%s' does not exist, can't continue!\n" "${param_state}" >&2
        exit 2
        ;;
esac


mkdir "${__object:?}/files"

# check if systemd sockets will be used
if [ -f "${__object:?}/parameter/bind-to" ]
then
    SYSTEMD_SOCKET="yes"
fi
if find "${__object:?}/parameter/" -maxdepth 1 -name "*-bind" -print -quit | grep -q .
then
    SYSTEMD_SOCKET="no"
fi
echo "${SYSTEMD_SOCKET}" >"${__object:?}/files/systemd_socket"

if [ "${state}" = "present" ]
then
    # already checked outside this if-clause
    export SYSTEMD_SOCKET

    PROTOCOL=$(cat "${__object:?}/parameter/protocol")
    export PROTOCOL

    if [ -f "${__object:?}/parameter/serve-static" ]
    then
        STATIC_MAP="yes"
        export STATIC_MAP
    fi

    # process template
    "${__type:?}/files/uwsgi.ini.sh" >"${__object:?}/files/uwsgi.ini"

    # uwsgi config file
    # TODO maybe patching with __key_value cause of .ini ?
    __file /opt/netbox/uwsgi.ini \
        --mode 644 --owner netbox \
        --source "${__object:?}/files/uwsgi.ini"

else
    # absent config file
    __file /opt/netbox/uwsgi.ini --state absent
fi


# handle the systemd socket
if [ "${SYSTEMD_SOCKET}" = "yes" ]
then
    TYPE="uWSGI"
    export TYPE

    # generate and set the socket unit
    "${__type:?}/files/netbox.socket.sh" "${__object:?}/parameter/bind-to" \
        >"${__object:?}/files/netbox.socket"
    __systemd_unit uwsgi-netbox.socket \
        --state "${state}" --enablement-state "${unit_state}" \
        --source "${__object:?}/files/netbox.socket" --restart
else
    # remove the systemd socket unit
    __systemd_unit uwsgi-netbox.socket --state absent
fi

# install service file
"${__type:?}/files/netbox.service.sh" >"${__object:?}/files/netbox.service"
__systemd_unit uwsgi-netbox.service \
    --state "${state}" --enablement-state "${unit_state}" \
    --source "${__object:?}/files/netbox.service" --restart
