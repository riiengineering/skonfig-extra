#!/bin/sh -e
#
# 2017 Kamila Součková (kamila at ksp.sk)
# 2018 Ľubomír Kučera (lubomir.kucera.jr at gmail.com)
# 2018 Darko Poljak (darko.poljak at gmail.com)
# 2021 Evil Ham (ungleich at evilham.com)
#
# This file is part of skonfig-extra.
#
# skonfig-extra is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# skonfig-extra is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with skonfig-extra. If not, see <http://www.gnu.org/licenses/>.
#

_explorer_var() {
	grep "^$1:" "${__object:?}/explorer/certificate-data" | cut -d ':' -f 2-
}

certificate_exists=$(_explorer_var certificate_exists)
name="${__object_id:?}"
state=$(cat "${__object:?}/parameter/state")

case ${state}
in
	absent)
		if [ "${certificate_exists}" = "no" ]
		then
			exit 0
		fi

		echo "certbot delete --cert-name '${name}' --quiet"

		echo remove >>"${__messages_out:?}"
	;;
	present)
		mkdir "${__global:?}/tmp"

		domain_param_file="${__object:?}/parameter/domain"
		requested_domains=$(mktemp "${__global:?}/tmp/domain.skonfig.XXXXXX")
		if [ -f "${domain_param_file}" ]
		then
			cp "${domain_param_file}" "${requested_domains}"
		else
			echo "${__object_id:?}" >>"${requested_domains}"
		fi

		staging=no
		if [ -f "${__object:?}/parameter/staging" ]
		then
			staging=yes
		fi

		if [ "${certificate_exists}" = "yes" ]
		then
			existing_domains=$(mktemp "${__global:?}/tmp/existing_domains.skonfig.XXXXXX")
			sed -e '1,3d' -e '/^$/d' <"${__object:?}/explorer/certificate-data" >"${existing_domains}"
			certificate_is_test=$(_explorer_var certificate_is_test)

			sort -uo "${requested_domains}" "${requested_domains}"
			sort -uo "${existing_domains}" "${existing_domains}"

			if [ -z "$(comm -23 "${requested_domains}" "${existing_domains}")" ] && \
				[ "${certificate_is_test}" = "${staging}" ]; then
				exit 0
			fi
		fi

		admin_email=$(cat "${__object:?}/parameter/admin-email")
		webroot=$(cat "${__object:?}/parameter/webroot")

		cat <<-EOF
		certbot certonly \
			--agree-tos \
			--cert-name '${name}' \
			--email '${admin_email}' \
			--expand \
			--non-interactive \
			--quiet \
			$(if [ "${staging}" = "yes" ]; then
				echo "--staging"
			elif [ "${certificate_is_test}" != "${staging}" ]
			then
				echo "--force-renewal"
			fi) \
			$(if [ -z "${webroot}" ]; then
				echo "--standalone"
			else
				echo "--webroot --webroot-path '${webroot}'"
			fi) \
			$(while read -r domain; do
				echo "--domain '${domain}' \\"
			done <"${requested_domains}")
		EOF
		rm -f "${requested_domains}"

		if [ "${certificate_exists}" = "no" ]
		then
			echo create >>"${__messages_out:?}"
		else
			echo change >>"${__messages_out:?}"
		fi
	;;
	*)
		echo "Unsupported state: ${state}" >&2

		exit 1
	;;
esac
