#!/bin/sh -e
#
# 2021-2022 Dennis Camera (dennis.camera at riiengineering.ch)
#
# This file is part of skonfig-extra.
#
# skonfig-extra is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# skonfig-extra is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with skonfig-extra. If not, see <http://www.gnu.org/licenses/>.
#

quote() { printf "'%s'" "$(printf '%s' "$*" | sed -e "s/'/'\\\\''/g")"; }
drop_awk_comments() { quote "$(sed '/^[[:blank:]]*#.*$/d;/^$/d' "$@")"; }

CONF_DIR=/etc/getssl

domain=${__object_id:?}
getssl_cfg=${CONF_DIR}/${domain}/getssl.cfg

state_should=$(cat "${__object:?}/parameter/state")
test "${state_should}" != 'absent' || exit 0  # removed in manifest

################################################################################
# Create getssl.cfg

test -s "${__object:?}/explorer/cfg-values" || {
	# NOTE: ${domain} needs to be quoted, because of wildcard certificates.
	printf 'getssl -w %s -c %s\n' "$(quote "${CONF_DIR}")" "$(quote "${domain}")"
}


################################################################################
# Update getssl.cfg

cfg_values_should=$(
	# CA
	if test -s "${__object:?}/parameter/ca"
	then
		printf 'CA="%s"\n' "$(head -n1 "${__object:?}/parameter/ca")"
	fi


	# SANs
	if test -s "${__object:?}/parameter/san"
	then
		sed -e :a -e '$!N;s/\n/,/' -e ta -e 's/.*/SANS="&"/' \
			"${__object:?}/parameter/san"
	fi

	# Chain
	if test -s "${__object:?}/parameter/preferred-chain"
	then
		printf 'PREFERRED_CHAIN="%s"\n' "$(head -n1 "${__object:?}/parameter/preferred-chain")"
	fi

	# File locations
	if test -s "${__object:?}/parameter/cert-loc"
	then
		printf 'DOMAIN_CERT_LOCATION="%s"\n' "$(head -n1 "${__object:?}/parameter/cert-loc")"
	fi
	if test -s "${__object:?}/parameter/key-loc"
	then
		printf 'DOMAIN_KEY_LOCATION="%s"\n' "$(head -n1 "${__object:?}/parameter/key-loc")"
	fi
	if test -s "${__object:?}/parameter/ca-loc"
	then
		printf 'CA_CERT_LOCATION="%s"\n' "$(head -n1 "${__object:?}/parameter/ca-loc")"
	fi
	if test -s "${__object:?}/parameter/chain-loc"
	then
		printf 'DOMAIN_CHAIN_LOCATION="%s"\n' "$(head -n1 "${__object:?}/parameter/chain-loc")"
	fi
	if test -s "${__object:?}/parameter/pem-loc"
	then
		printf 'DOMAIN_PEM_LOCATION="%s"\n' "$(head -n1 "${__object:?}/parameter/pem-loc")"
	fi

	# Reload command
	if test -s "${__object:?}/parameter/reload-cmd"
	then
		printf 'RELOAD_CMD="%s"\n' "$(head -n1 "${__object:?}/parameter/reload-cmd")"
	fi

	# Certificate check
	if ! test -f "${__object:?}/parameter/no-check-remote"
	then
		printf 'CHECK_REMOTE=true\n'
	else
		printf 'CHECK_REMOTE=false\n'
	fi
	if test -s "${__object:?}/parameter/server-type"
	then
		printf 'SERVER_TYPE="%s"\n' "$(head -n1 "${__object:?}/parameter/server-type")"
	fi

	# Domain validation
	if test -s "${__object:?}/parameter/validation"
	then
		next_validation_param() {
			test -n "${_input}" || return 1

			_param=${_input%%,*}

			_input=${_input#"${_param}"}
			_input=${_input#,}

			v_key=${_param%%=*}
			v_value=${_param#*=}

			test "${v_key}" != "${v_value}" || return 1  # invalid format
		}

		_input=$(cat "${__object:?}/parameter/validation")

		# Extract method
		validation_method=${_input%%:*}
		_input=${_input#"${validation_method}:"}

		case ${validation_method}
		in
			(http-01)
				while next_validation_param
				do
					case ${v_key}
					in
						(webroot)
							v_webroot=${v_value}
							;;
						(*)
							printf 'Invalid --validation option: %s\n' "${v_key}" >&2
							exit 1
							;;
					esac
				done

				test -n "${v_webroot}" || {
					echo 'Option webroot is required for http-01.' >&2
					exit 1
				}

				# only one ACL
				printf "ACL=('%s')\nUSE_SINGLE_ACL=true\n" "${v_webroot}"
				;;
			(dns-01)
				while next_validation_param
				do
					case ${v_key}
					in
						(add-script)
							v_addscr=${v_value}
							;;
						(del-script)
							v_delscr=${v_value}
							;;
						(*)
							printf 'Invalid --validation option: %s\n' "${v_key}" >&2
							exit 1
							;;
					esac
				done

				test -n "${v_addscr}" || {
					echo 'Option add-script is required for dns-01.' >&2
					exit 1
				}

				printf 'VALIDATE_VIA_DNS=true\n'
				printf 'DNS_ADD_COMMAND="%s"\n' "${v_addscr}"
				printf 'DNS_DEL_COMMAND="%s"\n' "${v_delscr:-true}"
				;;
			(*)
				printf 'Invalid --validation method: %s\n' "${validation_method}" >&2
				exit 1
				;;
		esac
		unset _input
	fi

	if test -s "${__object:?}/parameter/extra-config"
	then
		sort "${__object:?}/parameter/extra-config"
	fi
)

if ! printf '%s\n' "${cfg_values_should}" | sort | cmp -s "${__object:?}/explorer/cfg-values" -
then
	# NOTE: ${domain} needs to be quoted, because of wildcard certificates.
	cat <<CODE
post_update() {
	if ! cmp -s $(quote "${getssl_cfg}") $(quote "${getssl_cfg}.tmp")
	then
		# config has changed
		cat $(quote "${getssl_cfg}.tmp") >$(quote "${getssl_cfg}")
		rm -f $(quote "${getssl_cfg}.tmp")

		getssl -U -f $(quote "${domain}")
	else
		rm -f $(quote "${getssl_cfg}.tmp")
	fi
}
awk $(drop_awk_comments "${__type:?}/files/update_getssl_cfg.awk") <<'EOF' $(quote "${getssl_cfg}") >$(quote "${getssl_cfg}.tmp") \\
 && post_update || exit
${cfg_values_should}
EOF
CODE
fi
