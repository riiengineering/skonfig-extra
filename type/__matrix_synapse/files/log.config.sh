#!/bin/sh
#
# 2020-2021 Timoth√©e Floure (timothee.floure at posteo.net)
#
# This file is part of skonfig-extra.
#
# skonfig-extra is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# skonfig-extra is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with skonfig-extra. If not, see <http://www.gnu.org/licenses/>.
#
# Generate contents of log.config.
#

cat <<EOF
#################################################################
# THIS FILE HAS BEEN GENERATED BY SKONFIG. DO NOT EDIT BY HAND. #
#################################################################


# Log configuration for Synapse.
#
# This is a YAML file containing a standard Python logging configuration
# dictionary. See [1] for details on the valid settings.
#
# Synapse also supports structured logging for machine readable logs which can
# be ingested by ELK stacks. See [2] for details.
#
# [1]: https://docs.python.org/3.7/library/logging.config.html#configuration-dictionary-schema
# [2]: https://github.com/matrix-org/synapse/blob/master/docs/structured_logging.md
#
version: 1

formatters:
  precise:
   format: '%(asctime)s - %(name)s - %(lineno)d - %(levelname)s - %(request)s- %(message)s'

filters:
  context:
    (): synapse.util.logcontext.LoggingContextFilter
    request: ""

handlers:
  file:
    class: logging.handlers.TimedRotatingFileHandler
    formatter: precise
    filename: ${LOG_DIR:?}/homeserver.log
    when: midnight
    backupCount: 3  # Does not include the current log file.
    filters: [context]
    encoding: utf8
  # Default to buffering writes to log file for efficiency. This means that
  # will be a delay for INFO/DEBUG logs to get written, but WARNING/ERROR
  # logs will still be flushed immediately.
  buffer:
    class: logging.handlers.MemoryHandler
    target: file
    # The capacity is the number of log lines that are buffered before
    # being written to disk. Increasing this will lead to better
    # performance, at the expensive of it taking longer for log lines to
    # be written to disk.
    capacity: 10
    flushLevel: 30  # Flush for WARNING logs as well
  console:
    class: logging.StreamHandler
    formatter: precise
    level: WARN

loggers:
  synapse:
    level: INFO
  synapse.storage.SQL:
    # beware: increasing this to DEBUG will make synapse log sensitive
    # information such as access tokens.
    level: INFO
  twisted:
    level: INFO

root:
  level: INFO
  handlers: [buffer, console]
EOF
